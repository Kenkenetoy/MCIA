<krpano>

    <!-- documented -->

    <action name="addthumbs" scope="local">

        set(global.selected_side_thumbs, %1);
        trace(global.selected_side_thumbs, %1);
		set(global.selected_type_thumbs, %2);
		trace(global.selected_type_thumbs, %2);
        thumbing();
        
        
        <!-- GUARD CLAUSE -->
        if(get(global.selected_side_thumbs) != 'Bolod',
		    set(global.not_selected, Bolod);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Bolod'));
        );
        if(get(global.selected_side_thumbs) != 'Bil-isan',
		    set(global.not_selected, Bil-isan);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Bil-isan'));
        );
        if(get(global.selected_side_thumbs) != 'Danao',
		    set(global.not_selected, Danao);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Danao'));
        );
        if(get(global.selected_side_thumbs) != 'Doljo',
		    set(global.not_selected, Doljo);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Doljo'));
        );
        if(get(global.selected_side_thumbs) != 'Libaong',
		    set(global.not_selected, Libaong);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Libaong'));
        );
        if(get(global.selected_side_thumbs) != 'Looc',
		    set(global.not_selected, Looc);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Looc'));
        );
        if(get(global.selected_side_thumbs) != 'Poblacion',
		    set(global.not_selected, Poblacion);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Poblacion'));
        );
        if(selected_side_thumbs != 'Tawala',
		    set(global.not_selected, Tawala);
            disablethumbs();
        ,
            trace('This is currently selected, guard clause failed: ', calc('scrollarea_' + 'Tawala'));
        );
        
        enablespecificthumbs();

    </action>

    <action name="disablethumbs" params="not_selected">
        trace('Selected not to be visible: ', calc('scrollarea_' + get(not_selected) + '_Accomodation, _Restaurant, and _Other'));
        set(layer[calc('scrollarea_' + get(not_selected) + '_Accomodation')].visible, false);
        set(layer[calc('scrollarea_' + get(not_selected) + '_Restaurant')].visible, false);
        set(layer[calc('scrollarea_' + get(not_selected) + '_Other')].visible, false);
    </action>

    <action name="enablethumbs" params="selected">
        trace('Selected not to visible: ', calc('scrollarea_' + get(selected) + '_Accomodation, _Restaurant, and _Other'));
        set(layer[calc('scrollarea_' + get(selected) + '_Accomodation')].visible, true);
        set(layer[calc('scrollarea_' + get(selected) + '_Restaurant')].visible, true);
        set(layer[calc('scrollarea_' + get(selected) + '_Other')].visible, true);
    </action>

    <action name="enablespecificthumbs" params="selected">
        trace('Selected to be visible primally: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_' + get(global.selected_type_thumbs)));
        set(layer[calc('scrollarea_' + get(global.selected_side_thumbs) + '_' + get(global.selected_type_thumbs))].visible, true);
    </action>

    <action name="thumbing" params="side_thumbs, thumb_type">

        <!-- Initialize the global array for thumbnails -->
        def(global.thumbarray_forside, array);
        set(thumbcount_forside, 0);

        <!-- YAWA MAO RA DIAY NI ANG PROBLEMAA -->
        set(side_thumbs, get(selected_side_thumbs));
        set(thumb_type, get(selected_type_thumbs));

        <!-- Populate the thumbarray_forside with matching scenes -->
        for(set(i, 0), i LT scene.count, inc(i),
            trace('Processing scene index: ', i);
            trace('Scene name: ', scene[get(i)].name);
            trace('Scene type: ', scene[get(i)].type);
            trace('Scene barangay: ', scene[get(i)].barangay);

            if(isvalue(scene[get(i)].thumburl) 
            AND scene[get(i)].skipthumb != true 
            AND scene[get(i)].barangay == side_thumbs 
            AND scene[get(i)].type == thumb_type 
            AND scene[get(i)].head == true,
                trace('Adding scene to thumbarray_forside: ', scene[get(i)].name);
                set(thumbarray_forside[get(thumbcount_forside)], get(scene[get(i)]));
                set(scene[get(i)].sceneindex, get(i));
                set(scene[get(i)].thumbindex, get(thumbcount_forside));
                inc(thumbcount_forside);
                ,
                trace('Scene does not match: ', scene[get(i)].name);
            );
        );

        trace('Selected barangay for side: ', side_thumbs);
        trace('Selected thumbnail type: ', thumb_type);
        trace('Total thumbnails to add: ', thumbcount_forside);

        <!-- Check if thumbs are enabled in settings -->
        if(skin_settings.thumbs == false,
            set(layer[skin_btn_thumbs].visible, false);
            ,
            copy(thumbwidth, skin_settings.thumbs_width);
            copy(thumbheight, skin_settings.thumbs_height);
            copy(thumbpadding, skin_settings.thumbs_padding);
            copy(thumbcrop, skin_settings.thumbs_crop);

            calc(thumbxoffset, thumbwidth + thumbpadding);
            calc(thumbxcenter, thumbxoffset * 0.5);
            calc(thumbbarwidth, thumbxoffset * thumbcount_forside + thumbpadding);
            calc(thumbbarheight, thumbpadding + thumbheight + thumbpadding);

            trace('thumbwidth: ', thumbwidth);
            trace('thumbheight: ', thumbheight);
            trace('thumbpadding: ', thumbpadding);
            trace('thumbcrop: ', thumbcrop);
            trace('thumbxoffset: ', thumbxoffset);
            trace('thumbxcenter: ', thumbxcenter);
            trace('thumbbarwidth: ', thumbbarwidth);
            trace('thumbbarheight: ', thumbbarheight);

            <!-- Add thumbnail layers -->
            for(set(i, 0), i LT thumbcount_forside, inc(i),
                copy(currentscene, thumbarray_forside[get(i)]);

                calc(thumbname_side, 'skin_thumb_side_' + i);
                addlayer(get(thumbname_side));

                trace('Creating thumbnail layer: ', get(thumbname_side));

                set(layer[get(thumbname_side)],
                    url=get(currentscene.thumburl),
                    keep=true,
                    parent=calc('scrollarea_' + side_thumbs + '_' + thumb_type),
                    bgroundedge=get(skin_settings.design_thumbborder_bgroundedge),
                    align='top',
                    crop=get(thumbcrop),
                    width=get(thumbwidth),
                    height=get(thumbheight),
                    x=calc(thumbpadding + i * thumbxoffset),
                    y=get(thumbpadding),
                    linkedscene=get(currentscene.name),
                    onclick='copy(layer[skin_thumbborder].parent, name); skin_loadscene(get(linkedscene), get(skin_settings.loadscene_blend)); force_UI_2();'
                );

                if(device.mobile,
                    set(layer[get(thumbname_side)].scale, 1.5);
                );

                if(device.desktop,
                    set(layer[get(thumbname_side)].scale, .85);
                );

                trace('Thumbnail layer properties set for: ', get(thumbname_side));
                trace('URL: ', get(currentscene.thumburl));
                trace('Keep: true');
                trace('Parent: scrollarea_' + side_thumbs + '_' + thumb_type);
                trace('Background edge: ', get(skin_settings.design_thumbborder_bgroundedge));
                trace('Align: top');
                trace('Crop: ', get(thumbcrop));
                trace('Width: ', get(thumbwidth));
                trace('Height: ', get(thumbheight));
                trace('X position: ', calc(thumbpadding + i * thumbxoffset));
                trace('Y position: ', get(thumbpadding));
                trace('Linked scene: ', get(currentscene.name));

                set(currentscene, 
                    thumbx=calc(thumbpadding + i * thumbxoffset + thumbxcenter),
                    thumby=get(thumbpadding)
                );

                if(skin_settings.tooltips_thumbs,
                    set(layer[get(thumbname_side)].tooltip, get(currentscene.place));
                    layer[get(thumbname_side)].loadstyle(skin_tooltips);
                    trace('Tooltip set for thumbnail: ', get(currentscene.place));
                );

                if(skin_settings.thumbs_text,
                    calc(thumbtext, 'skin_thumbtext_side_' + i);
                    addlayer(get(thumbtext));
                    layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
                    set(layer[get(thumbtext)], 
                        keep=true, 
                        parent=get(thumbname_side), 
                        html=get(currentscene.place),
                        css='font-size:12px;color:white;font-family:Atma;text-align:center;',
                        edge='centertop',
                        y='-5%'
                    );
                    trace('Text layer properties set for: ', get(thumbtext));
                );
            );

            if(thumbcount_forside == 1,
                set(layer[scrollarea].align, 'top');
                trace('Align set to top for single thumbnail.');
            );
        );
    </action>

    <action name="changethumbs" scope="local" params="selected_type_button">
        set(global.selected_type_button, %1);
        changing(get(global.selected_type_button));
        trace('changethumbs - selected_type_button: ', get(global.selected_type_button));
    </action>

    <action name="changing" params="selected_type_button">
        set(layer[calc('scrollarea_' + get(global.selected_side_thumbs) + '_' + selected_type_button)].visible, true);
        addthumbs(get(global.selected_side_thumbs), get(selected_type_button));
        trace('changing - thumbing: ', get(global.selected_side_thumbs), selected_type_button);
        trace('changing - Selected to be visible: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_' + selected_type_button));

        <!-- GUARD CLAUSE -->
        if(selected_type_button != 'Accomodation',
            trace('Selected not to be visible: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Accomodation'));
            set(layer[calc('scrollarea_' + get(global.selected_side_thumbs) + '_Accomodation')].visible, false);
        ,
            trace('Guard Clause Failed: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Accomodation'));
        );

        if(selected_type_button != 'Restaurant',
            trace('Selected not to be visible: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Restaurant'));
            set(layer[calc('scrollarea_' + get(global.selected_side_thumbs) + '_Restaurant')].visible, false);
        ,
            trace('Guard Clause Failed: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Restaurant'));
        );

        if(selected_type_button != 'Other',
            trace('Selected not to be visible: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Other'));
            set(layer[calc('scrollarea_' + get(global.selected_side_thumbs) + '_Other')].visible, false);
        ,
            trace('Guard Clause Failed: ', calc('scrollarea_' + get(global.selected_side_thumbs) + '_Other'));
        );
    </action>
    
    <action name="force_UI_2">
        if(layer[canvas].state !== 'UI_2',
				change_UI();
        );
    </action>


</krpano>